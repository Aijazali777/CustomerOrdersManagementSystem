@model Customer

@{
    Layout = "_LayoutCustomer";
}

<div class="UIControl">
    <div>
        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.Id))
            @(Html.DevExtreme().TextBox()
            .Disabled(true)
            .Value(@Model.Id.ToString())
            .Width(130)

            )
        </div>
        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.Name))
            @(Html.DevExtreme().TextBox()
                .Value(@Model.Name)
                .Width(130)
            )
        </div>

        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.Gender))
            @(Html.DevExtreme().TextBox()
                .Value(@Model.Gender)
                .Width(130)
            )
        </div>
        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.Phone))
            @(Html.DevExtreme().TextBox()
                .Value(@Model.Phone.ToString())
                .Width(130)
            )
        </div>
        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.Address))
            @(Html.DevExtreme().TextBox()
                .Value(@Model.Address)
                .Width(130)
            )
        </div>
        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.City))
            @(Html.DevExtreme().TextBox()
                .Value(@Model.City)
                .Width(130)
            )
        </div>
        <div class="custom-label-textbox">
            @(Html.LabelFor(m => m.Country))
            @(Html.DevExtreme().TextBox()
                .Value(@Model.Country)
                .Width(130)
            )
            </div>
        </div>
    </div>

<div>
    @(Html.DevExtreme().Accordion()
        .ID("accordion-container")
        .Items(it =>
        {
            it.Add().Title("Orders").Template(new TemplateName("OrderAccordianTemplate"));
        }
        )
        .Collapsible(true)
        .Multiple(true)
    )
</div>

@using (Html.DevExtreme().NamedTemplate("OrderAccordianTemplate"))
{
    <div class="row">
        <div class="col-6">
            <div>
                @(Html.DevExtreme().TabPanel()
                    .ID("OrderTabPanel")
                    .Items(tp =>
                    {
                        tp.Add().Title("Product Orders").Template(new TemplateName("OrderTabTemplate"));
                    })
                )
            </div>
        </div>
        <div class="col-6">
            <div>
                @(Html.DevExtreme().TabPanel()
                    .ID("CryptoOrderTabPanel")
                    .Items(tp =>
                    {
                        tp.Add().Title("Crypto Orders").Template(new TemplateName("CrytoOrderTabTemplate"));
                    })
                )
            </div>
        </div>
    </div>
}

@using (Html.DevExtreme().NamedTemplate("OrderTabTemplate"))
{
    <div>
        @(Html.DevExtreme().DataGrid<Order>()
            .ID("orderGrid")
            .DataSource(ds => ds.Mvc()
                .Controller("Orders")
                .LoadParams(new { CustomerId = @Model.Id })
                .LoadAction("Get")
                .InsertAction("Post")
                .UpdateAction("Put")
                .DeleteAction("Delete")
                .Key("OrderId")
            )
            .Selection(s => s
            .Mode(SelectionMode.Single)
            )
            .RemoteOperations(true)
            .Height(665)
            .Columns(columns =>
            {
                columns.AddFor(m => m.OrderId).AllowEditing(false);
                columns.AddFor(m => m.CustomerId).Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi()
                        .Controller("Orders")
                        .LoadParams(new { CustomerId = @Model.Id })
                        .LoadAction("CustomersLookup")
                        .Key("Value")
                    )
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                );
                columns.AddFor(m => m.NumberOfItems);
                columns.AddFor(m => m.TotalPrice);
                columns.AddFor(m => m.PaymentStatus);
            })
            .HeaderFilter(f => f.Visible(true))
            .Editing(e => e
                .AllowAdding(true)
                .AllowUpdating(true)
                .AllowDeleting(true)
            )
        )
    </div>
}

@using (Html.DevExtreme().NamedTemplate("CrytoOrderTabTemplate"))
{
    <div>
        @(Html.DevExtreme().DataGrid<CryptoOrder>()
            .ID("cryptoOrderGrid")
            .DataSource(ds => ds.Mvc()
                .Controller("CryptoOrders")
                .LoadParams(new { CustomerId = @Model.Id })
                .LoadAction("Get")
                .InsertAction("Post")
                .UpdateAction("Put")
                .DeleteAction("Delete")
                .Key("CryptoId")
            )
            .Selection(s => s
            .Mode(SelectionMode.Single)
            )
            .Scrolling(scrolling => scrolling
                .ColumnRenderingMode(GridColumnRenderingMode.Virtual)
                .ShowScrollbar(ShowScrollbarMode.Always)
            )
            .RemoteOperations(true)
            .Height(665)
            .Columns(columns =>
            {

                columns.AddFor(m => m.CryptoId).AllowEditing(false);

                columns.AddFor(m => m.CustomerId).Lookup(lookup => lookup
                            .DataSource(ds => ds.WebApi()
                                .Controller("Orders")
                                .LoadParams(new { CustomerId = @Model.Id })
                                .LoadAction("CustomersLookup")
                                .Key("Value")
                            )
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                        );

                columns.AddFor(m => m.Symbol);

                columns.AddFor(m => m.Quantity);

                columns.AddFor(m => m.Price);
            })
            .HeaderFilter(f => f.Visible(true))
            .Editing(e => e
                .AllowAdding(true)
                .AllowUpdating(true)
                .AllowDeleting(true)
            )
        )
    </div>
}

